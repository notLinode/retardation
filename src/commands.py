from discord import Message, Client, TextChannel

import time
import random
import re

from bot_variables import *
import get_ai_response as ai
from shop_buttons_view import *

async def prompt(message: Message, AKASH_API_KEY: str) -> None:
    async with message.channel.typing():
        bot_msg: Message = await message.channel.send("‚úÖ\n")
        chunk_buf: str = ""
        chunk_buf_len: int = 0

        for chunk in ai.stream_response(AKASH_API_KEY, message.content[8:]):
            if chunk is None:
                break

            chunk_buf += chunk
            chunk_buf_len += len(chunk)

            if chunk_buf_len >= 200:
                bot_msg = await bot_msg.edit(content=bot_msg.content + chunk_buf)
                chunk_buf = ""
                chunk_buf_len = 0

        if chunk_buf:
            await bot_msg.edit(content=bot_msg.content + chunk_buf)

async def set_message_interval(message: Message, bot_vars: BotVariables) -> None:
    async with message.channel.typing():
        interval_str: str = message.content[22:].lower()
        
        if not interval_str.isnumeric() and interval_str != "random":
            await message.channel.send(f":prohibited: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∏–±–æ —á–∏—Å–ª–æ–º –æ—Ç `{bot_vars.SETTING_MESSAGE_INTERVAL_MIN}` –¥–æ `{bot_vars.SETTING_MESSAGE_INTERVAL_MAX}`, –ª–∏–±–æ `random`.")
            return

        if interval_str == "random":
            bot_vars.setting_message_interval_is_random = True
            bot_vars.message_interval_random = int(random.random() * 10) + 1

            await message.channel.send(f":white_check_mark: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞ –±—É–¥–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        
        interval: int = int(interval_str)

        is_interval_less_than_min: bool = interval < bot_vars.SETTING_MESSAGE_INTERVAL_MIN
        is_interval_more_than_max: bool = interval > bot_vars.SETTING_MESSAGE_INTERVAL_MAX
        if is_interval_less_than_min or is_interval_more_than_max:
            await message.channel.send(f":prohibited: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç `{bot_vars.SETTING_MESSAGE_INTERVAL_MIN}` –¥–æ `{bot_vars.SETTING_MESSAGE_INTERVAL_MAX}` —Å–æ–æ–±—â–µ–Ω–∏–π. –í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: `{interval}`.")
            return

        bot_vars.setting_message_interval = interval
        bot_vars.setting_message_interval_is_random = False
        
        await message.channel.send(f":white_check_mark: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ `{bot_vars.setting_message_interval}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")

async def set_own_message_memory(message: Message, bot_vars: BotVariables) -> None:
    async with message.channel.typing():
        memory: int = int(message.content[24:])

        is_memory_less_than_min: bool = memory < bot_vars.SETTING_OWN_MESSAGE_MEMORY_MIN
        is_memory_more_than_max: bool = memory > bot_vars.SETTING_OWN_MESSAGE_MEMORY_MAX
        if is_memory_less_than_min or is_memory_more_than_max:
            await message.channel.send(f":prohibited: –ü–∞–º—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç `{bot_vars.SETTING_OWN_MESSAGE_MEMORY_MIN}` –¥–æ `{bot_vars.SETTING_OWN_MESSAGE_MEMORY_MAX}` —Å–æ–æ–±—â–µ–Ω–∏–π. –í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: `{memory}`.")
            return

        bot_vars.setting_own_message_memory = memory

        await message.channel.send(f":white_check_mark: –ü–∞–º—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ `{bot_vars.setting_own_message_memory}` —Å–æ–æ–±—â–µ–Ω–∏–π.")

async def clear_memory(message: Message, bot_vars: BotVariables) -> None:
    async with message.channel.typing():
        bot_vars.recent_messages.clear()
        bot_vars.stylized_bot_messages.clear()
        await message.channel.send(f":white_check_mark: —è –≤—Å—ë –∑–∞–±–±—ã–ª –Ω–∞—Ö—É–π")

async def feed(message: Message, AKASH_API_KEY: str, bot_vars: BotVariables) -> None:
    async with message.channel.typing():
        if bot_vars.user_interaction_tokens[message.author.id][0] <= 0:
            await message.channel.send(":prohibited: –£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. –û–Ω–∏ –≤—ã–¥–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return
        bot_vars.user_interaction_tokens[message.author.id][0] -= 1
        
        food_item: str = message.content[6:]
        food_satiety: int = ai.generate_food_satiety(AKASH_API_KEY, food_item)
        bot_vars.add_satiety(float(food_satiety))

        response: str = f"–≤–∞—É –º–Ω–µ –¥–∞–ª–∏ **{food_item}** –∏ —è {'–ø–æ–ª—É—á–∏–ª' if food_satiety >= 0 else '–ø–æ—Ç–µ—Ä—è–ª'} `{abs(food_satiety)}` —Å—ã—Ç–æ—Å—Ç–∏ {':drooling_face::drooling_face:' if food_satiety >= 40 else ''}\n"
        item: ShopItem = ShopItem(food_item, food_satiety, 0, 0, 0, 0, 0, 0)
        response += ai.generate_feeding_comment(AKASH_API_KEY, item)

        await message.channel.send(response)

async def heal(message: Message, AKASH_API_KEY: str, bot_vars: BotVariables) -> None:
    async with message.channel.typing():
        if bot_vars.user_interaction_tokens[message.author.id][0] <= 0:
            await message.channel.send(":prohibited: –£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. –û–Ω–∏ –≤—ã–¥–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return
        bot_vars.user_interaction_tokens[message.author.id][0] -= 1

        item: str = message.content[6:]
        item_health: int = ai.generate_item_health(AKASH_API_KEY, item)
        bot_vars.add_health(float(item_health))

        response: str = f"–º–µ–Ω—è –ø–æ–¥–ª–µ—á–∏–ª–∏ —Å –ø–æ–º–æ—â—å—é **{item}** –∏ —è {'–ø–æ–ª—É—á–∏–ª' if item_health >= 0 else '–Ω–∞—Ö—É–π –ø–æ—Ç–µ—Ä—è–ª'} `{abs(item_health)}` –∑–¥–æ—Ä–æ–≤—å—è {':heart:' if item_health >= 0 else ':broken_heart::broken_heart::broken_heart:'}\n"
        item_obj: ShopItem = ShopItem(item, 0, item_health, 0, 0, 0, 0, 0)
        response += ai.generate_feeding_comment(AKASH_API_KEY, item_obj)
        
        await message.channel.send(response)

async def clean_litter(message: Message, bot_vars: BotVariables) -> None:
    async with message.channel.typing():
        if bot_vars.litter_box_fullness > 0:
            bonus_tokens: int = bot_vars.litter_box_fullness // 10
            bot_vars.litter_box_fullness = 0
            bot_vars.user_interaction_tokens[message.author.id][0] += bonus_tokens
            await message.channel.send(f"–ª–æ—Ç–æ–∫ –æ—á–∏—â–µ–Ω :white_check_mark:\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus_tokens} ü™ô")
        else:   
            await message.channel.send("–ª–æ—Ç–æ–∫ —É–∂–µ —á–∏—Å—Ç....")

async def shop(message: Message, AKASH_API_KEY: str, bot_vars: BotVariables) -> None:
    async with message.channel.typing():
        if not bot_vars.get_shop_items_str():
            bot_vars.shop_items = ai.generate_shop_items(AKASH_API_KEY)
            
        await message.channel.send(bot_vars.get_shop_items_str(), view=ShopView(bot_vars))

async def buy(message: Message, bot_vars: BotVariables) -> None:
    async with message.channel.typing():
        item_idx_str: str = message.content[5:]

        if not item_idx_str.isnumeric():
            await message.channel.send(":prohibited: –≤—ã –¥–∞—É–Ω")
            return
        
        item_idx: int = int(item_idx_str) - 1
        await buy_item(item_idx, message.channel, message.author.id, bot_vars)

# Used by ShopButton
async def buy_item(idx: int, channel: TextChannel, userid: int, bot_vars: BotVariables) -> bool:
    async with channel.typing():
        item: ShopItem = bot_vars.shop_items[idx]
        
        if item.is_bought:
            await channel.send(f":prohibited: –≠—Ç–∞ –≤–µ—â—å —É–∂–µ –∫—É–ø–ª–µ–Ω–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞.")
            return item.is_bought
        
        if bot_vars.user_interaction_tokens[userid][0] < item.cost:
            await channel.send(f":prohibited: –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (—É –≤–∞—Å `{bot_vars.user_interaction_tokens[userid][0]}`). –û–Ω–∏ –≤—ã–¥–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return item.is_bought
        
        bot_vars.user_interaction_tokens[userid][0] -= item.cost
        item.is_name_hidden = item.is_satiety_hidden = item.is_health_hidden = False
        response: str = f"<@{userid}>, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {item}\n"
        item.is_bought = True

        bot_vars.add_health(item.health)
        bot_vars.add_satiety(item.satiety)

        response += ai.generate_feeding_comment(bot_vars.ai_key, item)
        await channel.send(response)

    return item.is_bought

async def status(message: Message, bot_vars: BotVariables) -> None:
    async with message.channel.typing():
        bot_status: str = f":heart: –ó–¥–æ—Ä–æ–≤—å–µ: `{int(bot_vars.health)}`\n"
        bot_status += f":meat_on_bone: –°—ã—Ç–æ—Å—Ç—å: `{int(bot_vars.satiety)}`\n"
        bot_status += f":poop: –ù–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ª–æ—Ç–∫–∞: `{bot_vars.litter_box_fullness}`\n"
        bot_status += f":hourglass: –ë–æ—Ç –ø—Ä–æ–∂–∏–ª: `{(int(time.time()) - bot_vars.CREATED_AT) // 3600}` —á–∞—Å–æ–≤\n\n"
        bot_status += f":coin: –í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: `{bot_vars.user_interaction_tokens[message.author.id][0]}`"

        await message.channel.send(bot_status)

async def tokens(message: Message, bot_vars: BotVariables) -> None:
    async with message.channel.typing():
        await message.channel.send(f":coin: –í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: `{bot_vars.user_interaction_tokens[message.author.id][0]}`")

async def help(message: Message) -> None:
    async with message.channel.typing():
        help_msg: str = "```"
        help_msg += "\n;prompt [–°–æ–æ–±—â–µ–Ω–∏–µ: str] - –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ Llama 3.1 405B.\n"
        help_msg += "\n;set-message-interval [–ò–Ω—Ç–µ—Ä–≤–∞–ª: int | \"random\"] - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ—Ç —Å–∞–º —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—à–µ—Ç.\n"
        help_msg += "\n;set-own-message-memory [–ü–∞–º—è—Ç—å: int] - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –∑–∞–ø–æ–º–Ω–∏—Ç –∏ —É—á—Ç—ë—Ç –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        help_msg += "\n;clear-memory - –û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –±–æ—Ç–∞ –æ—Ç —Å–≤–æ–∏—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        help_msg += "\n;ping - pong.\n"
        help_msg += "\n------====* –ö–û–ú–ê–ù–î–´ –£–•–û–î–ê –ó–ê –ë–û–¢–û–ú *====------\n"
        help_msg += "\n;status - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤.\n"
        help_msg += "\n;tokens - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤.\n"
        help_msg += "\n;shop - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω. –ú–∞–≥–∞–∑–∏–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å.\n"
        help_msg += "\n;buy [–ù–æ–º–µ—Ä: int] - –ü–æ–∫—É–ø–∞–µ—Ç –≤–µ—â—å –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –¥–∞—ë—Ç –µ—ë –±–æ—Ç—É.\n"
        help_msg += "\n;feed [–ï–¥–∞: str] - –ö–æ—Ä–º–∏—Ç –±–æ—Ç–∞ —Ç–µ–º, —á—Ç–æ –≤—ã —É–∫–∞–∂–µ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ. –¢—Ä–∞—Ç–∏—Ç 1 —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.\n"
        help_msg += "\n;heal [–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: str] - –õ–µ—á–∏—Ç –±–æ—Ç–∞ —Ç–µ–º, —á—Ç–æ –≤—ã —É–∫–∞–∂–µ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ. –¢—Ä–∞—Ç–∏—Ç 1 —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.\n"
        help_msg += "\n;clean-litter - –û—á–∏—â–∞–µ—Ç –ª–æ—Ç–æ–∫ –±–æ—Ç–∞. –¢—Ä–∞—Ç–∏—Ç 1 —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.\n"
        help_msg += "```"

        await message.channel.send(help_msg)

async def process_tokens_info(message: Message, bot_vars: BotVariables) -> None:
    userid: int = message.author.id

    if userid not in bot_vars.user_interaction_tokens:
            bot_vars.user_interaction_tokens[userid] = [3, 5, int(time.time())]

    if message.author.bot:
        return

    if bot_vars.user_interaction_tokens[userid][1] <= 0:
        bot_vars.user_interaction_tokens[userid][1] = 5
        bot_vars.user_interaction_tokens[userid][0] += 1
        await message.add_reaction("ü™ô")
    else:
        bot_vars.user_interaction_tokens[userid][1] -= 1

    time_since_last_message: int = int(time.time()) - bot_vars.user_interaction_tokens[userid][2]
    if time_since_last_message >= 3600:
        bot_vars.user_interaction_tokens[userid][0] += min(3, time_since_last_message // 3600) # Can't earn more than 3 tokens by idling
        await message.add_reaction("ü™ô")
    
    bot_vars.user_interaction_tokens[userid][2] = int(time.time())

async def automessage(
        message: Message,
        AKASH_API_KEY: str,
        bot_vars: BotVariables,
        client: Client
        ) -> None:
    bot_vars.recent_messages.append(message)

    is_mentioned: bool = client.user in message.mentions

    regex_match = re.search(r"(?:\s|^)–∏–Ω–≤–∞–ª–∏–¥", message.content.lower())
    is_mentioned_directly: bool = regex_match is not None
    
    is_time_to_automessage: bool

    if bot_vars.setting_message_interval_is_random:
        is_time_to_automessage = bot_vars.message_interval_random <= 0
        if is_time_to_automessage:
            bot_vars.message_interval_random = int(random.random() * 10.0) + 4
        else:
            bot_vars.message_interval_random -= 1
    else:
        recent_messages_len: int = len(bot_vars.recent_messages)
        is_time_to_automessage = recent_messages_len >= bot_vars.setting_message_interval

    automessage_condition: bool = is_mentioned or is_mentioned_directly or is_time_to_automessage
    if automessage_condition and bot_vars.recent_messages:
        async with message.channel.typing():
            automessage: str = ai.generate_automessage(AKASH_API_KEY, bot_vars)
            await message.channel.send(automessage)

            bot_vars.recent_messages.clear()

            bot_vars.stylized_bot_messages.append(automessage)
            while (len(bot_vars.stylized_bot_messages) > bot_vars.setting_own_message_memory):
                bot_vars.stylized_bot_messages.pop(0)
