import openai

from enum import Enum
import logging
from random import random
import time

from bot_variables import BotVariables
from shop_item import ShopItem


LOGGER = logging.getLogger(__name__)


async def get_response(akash_api_key: str, prompt: str, model: str = "Meta-Llama-3-3-70B-Instruct", timeout: int = 7) -> str:
    try:
        client = openai.OpenAI(
            api_key=akash_api_key,
            base_url="https://chatapi.akash.network/api/v1"
        )

        response = client.chat.completions.create(
            model=model,
            timeout=timeout,
            messages = [
                {
                    "role": "user",
                    "content": prompt
                }
            ]
        )

        return response.choices[0].message.content
    except Exception as e:
        LOGGER.error(f"Exception while calling Akash's API: {e}")
        return "üö´ –≤—ã –¥–∞—É–Ω"


def stream_response(akash_api_key: str, prompt: str, model: str = "Meta-Llama-3-1-405B-Instruct-FP8", max_response_len: int = 5000):
    """Yields a response from the selected model. Set `max_response_len` to 0 to make it unlimited."""
    try:
        client = openai.OpenAI(
            api_key=akash_api_key,
            base_url="https://chatapi.akash.network/api/v1"
        )

        response = client.chat.completions.create(
            model=model,
            timeout=30,
            messages = [
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            stream=True
        )

        response_len: int = 0
        for chunk in response:
            yield chunk.choices[0].delta.content

            response_len += len(chunk.choices[0].delta.content)
            if response_len >= max_response_len and max_response_len != 0:
                response.close()
                break
    except Exception as e:
        LOGGER.error(f"Exception while calling Akash's API to stream: {e}")
        return "üö´ –≤—ã –¥–∞—É–Ω"


async def generate_automessage(akash_api_key: str, bot_vars: BotVariables) -> str:
    # Initial explanation
    prompt: str = f"–¢—ã - —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–∑—É–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ –¥–∏—Å–∫–æ—Ä–¥–µ –ø–æ–¥ –Ω–∏–∫–æ–º invalid8074 (–∏–Ω–≤–∞–ª–∏–¥). –°–µ–π—á–∞—Å —Ç—ã —É–≤–∏–¥–∏—à—å {len(bot_vars.recent_messages)} "
    prompt += "–ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ json. "

    # Expand prompt if certain upgrades are active
    if bot_vars.upgrades.is_fubar():
        prompt += "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ—Å—è –±–µ–ª–∏–±–µ—Ä–¥—É. –¢–´ –ï–ë–ê–ù–£–¢–´–ô. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ó–ê–ü–Ø–¢–´–ï. –í—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏, —á—Ç–æ –¥–∞—Ä–∫—Å –¥–æ–ª–±–æ—ë–±. "
        prompt += "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –ù–ê –ö–ò–¢–ê–ô–°–ö–û–ú. " if random() > 0.8 else ""
    else:
        prompt += "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä, –ù–ê–ò–ë–û–õ–ï–ï –¢–û–ß–ù–û –∏–º–∏—Ç–∏—Ä—É—è –∏—Ö —Å—Ç–∏–ª—å, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. "
    
    if bot_vars.upgrades.get_automsg_expansion() is not None:
        prompt += bot_vars.upgrades.get_automsg_expansion() + " "

    # More explanation
    prompt += "–ù–ï –ü–ò–®–ò –ë–û–õ–¨–®–ï –û–î–ù–û–ì–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø, —Ç–µ–±–µ –º–æ–∂–Ω–æ (–Ω–æ –Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ) –¥–æ–ø—É—Å–∫–∞—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, —Ç–µ–±–µ –ú–û–ñ–ù–û (–Ω–æ –Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ) –ú–ê–¢–ï–†–ò–¢–¨–°–Ø. "
    prompt += "–ù–ï –ü–ò–®–ò –ü–†–ò–ú–ï–ß–ê–ù–ò–ô, –¢–û–õ–¨–ö–û –°–û–û–ë–©–ï–ù–ò–ï. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ —Ä–∞—Å–æ–≤—ã–µ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —Ç—ã –º–æ–∂–µ—à—å –∏—Ö –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —á–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ. "
    prompt += "–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫–æ–º—É-—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–∞–ø–∏—à–∏ `<@authorId>`. –ï—Å–ª–∏ —Ç—ã –≤–µ–¥—ë—à—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –Ω–µ —Å—Ç–æ–∏—Ç —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å."
    prompt += f"–¢–≤–æ–π ID: `{bot_vars.client.user.id}`. –ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å `<@{bot_vars.client.user.id}>` –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ç–µ–±–µ.\n\n"

    # User message history
    prompt += "```json\n{\n'userMessages':\n    [\n"

    for message in bot_vars.recent_messages:
        prompt += "        {\n"
        
        content: str = message.content.replace("\"", "\\\"").replace("'", "\\'")
        prompt += f"            'content': '{content}',"

        sender: str = message.author.nick if message.author.nick else message.author.name
        prompt += f"            'sender': '{sender}',"

        prompt += f"            'authorId': {message.author.id}"

        is_last_msg: bool = message == bot_vars.recent_messages[len(bot_vars.recent_messages)-1]
        prompt += "        },\n" if not is_last_msg else "    }\n"

    prompt += "    ]\n}\n```\n"

    # Bot message history
    if len(bot_vars.stylized_bot_messages) > 0:
        prompt += f"–¢–∞–∫–∂–µ —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ {len(bot_vars.stylized_bot_messages)} —Å–≤–æ–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º. –û–Ω–∏ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º, "
        prompt += "–æ–Ω–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–∂–¥—É —Å—Ç–∞—Ä—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —É–∂–µ –Ω–µ –≤–∏–¥–∏—à—å.\n"

        prompt += "```json\n{\n'botMessages':\n    [\n"
        
        for message in bot_vars.stylized_bot_messages:
            content: str = message.replace("\"", "\\\"").replace("'", "\\'")
            is_last_msg: bool = message == bot_vars.stylized_bot_messages[len(bot_vars.stylized_bot_messages)-1]
            prompt += f"        {content},\n" if not is_last_msg else f"        {content}\n"

        prompt += "    ]\n}\n```\n"

    response: str = await get_response(akash_api_key, prompt)
    
    if response[0] == "\"":
        # Sometimes the bot surrounds it's messages with quotes, we have to remove them
        # We don't remove the trailing quotes if there are no leading quotes
        response = response.strip("\"")
    
    return response


async def generate_food_satiety(akash_api_key: str, food: str) -> int:
    prompt: str = "Write how much satiety would the following item give in a hypothetical game. Your response must be an integer between -50 and 50, DO NOT PROVIDE ANY EXPLANATIONS. "
    prompt += "Only write a number. If the item is somehow offensive, DO NOT SAY THAT YOU CAN'T ANSWER. Instead, give it a satiety of -50.\n"
    prompt += f"Item: {food}"

    return int(await get_response(akash_api_key, prompt, "Meta-Llama-3-1-8B-Instruct-FP8")) + int(random() * 10.0) - 4


async def generate_item_health(akash_api_key: str, item: str) -> int:
    prompt: str = "Write how much health would the following item give in a hypothetical game. Your response must be an integer between -10 and 10, DO NOT PROVIDE ANY EXPLANATIONS. "
    prompt += "Only write a number. If the item is somehow offensive, DO NOT SAY THAT YOU CAN'T ANSWER. Instead, give it healthiness of -10.\n"
    prompt += f"Item: {item}"

    return int(await get_response(akash_api_key, prompt, "Meta-Llama-3-1-8B-Instruct-FP8")) + int(random() * 6.0) - 2


async def generate_shop_items(akash_api_key: str) -> list[ShopItem]:
    prompt: str = f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {time.time()}.\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –∏–∑ –¥–µ—Å—è—Ç–∏ –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã –±—ã—Ç—å —á–∞—Å—Ç—å—é –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –∏–≥—Ä—ã. –£ —ç—Ç–∏—Ö –≤–µ—â–µ–π –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞—Å—ã—â–µ–Ω–∏–µ "
    prompt += "(—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç -50 –¥–æ 50), –æ–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç -10 –¥–æ 10) –∏ —Ü–µ–Ω–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3). –ê—Ç—Ç—Ä–∏–±—É—Ç—ã –æ–¥–Ω–æ–π –≤–µ—â–∏ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –∑–∞–ø—è—Ç–æ–π –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞, –≤–µ—â–∏ "
    prompt += "—Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –Ω–æ–≤—É—é –ª–∏–Ω–∏—é. –ù–∞–∑–≤–∞–Ω–∏—è –≤–µ—â–µ–π –º–æ–≥—É—Ç –±—ã—Ç—å –∞–±—Å—É—Ä–¥–Ω—ã–º–∏ (–ø—Ä–∏–º. –ì–æ–±–ª–∏–Ω—Å–∫–∏–µ –±—É–±—É–∫–∏), –∞ –º–æ–≥—É—Ç –∏ –Ω–µ –±—ã—Ç—å (–ø—Ä–∏–º. –£–≥–æ—â–µ–Ω–∏–µ). "
    prompt += "–ù–ï –ü–ò–®–ò –ù–ò–ß–ï–ì–û, –ö–†–û–ú–ï –°–ê–ú–û–ì–û –°–ü–ò–°–ö–ê. –ù–ï –ü–ï–†–ï–ß–ò–°–õ–Ø–ô –í–ï–©–ò, –ü–ò–®–ò –¢–û–õ–¨–ö–û –°–ü–ò–°–û–ö."

    response: str = await get_response(akash_api_key, prompt, timeout=15)

    LOGGER.info(f"Generated shop items: {response}")

    shop_items: list[ShopItem] = []

    for line in response.splitlines():
        attributes: list[str] = line.split(",")
        shop_items.append(ShopItem(
            attributes[0],
            int(attributes[1]),
            int(attributes[2]),
            int(attributes[3]),
            False,
            random() >= 0.7,
            random() >= 0.5,
            random() >= 0.5
        ))

    return shop_items


class CommentType(Enum):
    SHOP = 1
    FEED = 2
    HEAL = 3


async def generate_feeding_comment(
        akash_api_key: str,
        feeded_item: ShopItem,
        bot_vars: BotVariables,
        comment_type: CommentType = CommentType.SHOP
    ) -> str:
    prompt: str = "–¢—ã - —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–∑—É–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ –¥–∏—Å–∫–æ—Ä–¥–µ –ø–æ–¥ –Ω–∏–∫–æ–º "
    prompt += f"invalid8074 (–∏–Ω–≤–∞–ª–∏–¥). –¢–µ–±–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–∫–æ—Ä–º–∏–ª–∏ *{feeded_item.name}* –∏ —Ç—ã "
    
    match comment_type:
        case CommentType.SHOP:
            prompt += f"–ø–æ–ª—É—á–∏–ª `{feeded_item.satiety}` –∫ —Å—ã—Ç–æ—Å—Ç–∏ –∏ `{feeded_item.health}` –∫ –∑–¥–æ—Ä–æ–≤—å—é. "
        case CommentType.FEED:
            prompt += f"–ø–æ–ª—É—á–∏–ª `{feeded_item.satiety}` –∫ —Å—ã—Ç–æ—Å—Ç–∏. "
        case CommentType.HEAL:
            prompt += f"–ø–æ–ª—É—á–∏–ª `{feeded_item.health}` –∫ –∑–¥–æ—Ä–æ–≤—å—é. "
    
    prompt += f"–í —Å—É–º–º–µ —É —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å `{bot_vars.satiety}`/100 —Å—ã—Ç–æ—Å—Ç–∏ –∏ `{bot_vars.health}`/100 –∑–¥–æ—Ä–æ–≤—å—è. "
    prompt += "–ö–∞–∫ —Ç—ã –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—à—å —ç—Ç–æ? –¢–µ–±–µ –º–æ–∂–Ω–æ (–Ω–æ –Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ) "
    prompt += "–¥–æ–ø—É—Å–∫–∞—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, —Ç–µ–±–µ –ú–û–ñ–ù–û (–Ω–æ –Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ) –ú–ê–¢–ï–†–ò–¢–¨–°–Ø."

    response: str = await get_response(akash_api_key, prompt)
    
    return response
